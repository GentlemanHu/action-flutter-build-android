name: flutter-build-android
description: Builds an apk or appbundle
inputs:
  working-directory:
    description: The root directory of the flutter app within this repository
    default: ./
  build-cmd:
    description: The full build command, can be used to add arguments
    default: flutter build apk --release
  release-key:
    description: "key with which to sign the app"
    required: true
  release-key-password:
    description: "The password for the playstore key used to sign the app"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check java found
      run: java --version
      id: check_java
      shell: bash
      continue-on-error: true

    - name: Install java
      if: steps.check_java.outcome == 'failure'
      uses: actions/setup-java@v3
      with:
        distribution: "zulu"
        java-version: "17.x"
        cache: "gradle"

    - name: Check flutter found
      run: flutter --version
      id: check_flutter
      shell: bash
      continue-on-error: true

    - name: Setup flutter
      if: steps.check_flutter.outcome == 'failure'
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    - run: flutter --version
      shell: bash

    - name: Decode keystore and create jks and properties file for signing the app
      shell: bash
      run: |
        echo "$RELEASE_KEY" | base64 --decode > app/keystore.jks
        echo "storeFile=keystore.jks" >> key.properties
        echo "keyAlias=upload" >> key.properties
        echo "storePassword=$RELEASE_KEY_PASSWORD" >> key.properties
        echo "keyPassword=$RELEASE_KEY_PASSWORD" >> key.properties
      env:
        RELEASE_KEY: ${{ inputs.release-key }}
        RELEASE_KEY_PASSWORD: ${{ inputs.release-key-password }}
      working-directory: ${{ inputs.working-directory }}/android

    - name: Build
      run: ${{ inputs.build-cmd }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
